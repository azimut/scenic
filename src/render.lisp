(in-package #:scenic)

(defun-g vert ((vert g-pnt) &uniform
               (model-world :mat4)
               (world-view  :mat4)
               (view-clip   :mat4)
               (scale       :float))
  (let* ((pos        (* scale (pos vert)))
         (world-pos  (* model-world (v! pos 1)))
         (view-pos   (* world-view  world-pos))
         (clip-pos   (* view-clip   view-pos))
         (tex        (tex vert))
         (norm       (norm vert))
         (world-norm (* (m4:to-mat3 model-world) norm)))
    (values clip-pos tex world-norm (s~ world-pos :xyz))))

;; ?
;; From "pushing pixels" don't remember why it's needed
(defun-g treat-uvs ((uv :vec2))
  (v! (x uv) (- 1.0 (y uv))))

(defun-g vert-with-tbdata ((vert g-pnt) (tb tb-data) &uniform
                           (model-world :mat4)
                           (world-view  :mat4)
                           (view-clip   :mat4)
                           (scale       :float)
                           (uv-repeat   :vec2)
                           (cam-pos     :vec3)
                           (dirlights   dir-light-data   :ubo)
                           (pointlights point-light-data :ubo)
                           (spotlights  spot-light-data  :ubo))
  (let* ((pos       (* scale       (pos vert)))
         (world-pos (* model-world (v! pos 1)))
         (view-pos  (* world-view  world-pos))
         (clip-pos  (* view-clip   view-pos))
         (uv        (* uv-repeat (tex vert)))
         (normal-m3 (transpose (inverse (m4:to-mat3 model-world))))
         (norm      (norm vert))
         (norm      (* (m4:to-mat3 model-world)
                       norm))
         (t0  (normalize (* normal-m3 (tb-data-tangent tb))))
         (n0  (normalize (* normal-m3 (norm vert))))
         (t0  (normalize (- t0 (* (dot t0 n0) n0))))
         (b0  (cross n0 t0))
         (tbn (mat3 t0 b0 n0))
         (dir-pos       (vector (v! 0 0 0 0) (v! 0 0 0 0)))
         (spot-pos      (vector (v! 0 0 0 0) (v! 0 0 0 0)))
         (tan-dir-pos   (vector (v! 0 0 0) (v! 0 0 0)))
         (tan-spot-pos  (vector (v! 0 0 0) (v! 0 0 0)))
         (tan-point-pos (vector (v! 0 0 0) (v! 0 0 0) (v! 0 0 0) (v! 0 0 0))))
    (dotimes (i (size dirlights))
      (setf (aref dir-pos i) (*  (aref (lightspace dirlights) i) world-pos)))
    (dotimes (i (size spotlights))
      (setf (aref spot-pos i) (*  (aref (lightspace spotlights) i) world-pos)))
    (dotimes (i (size dirlights))
      (setf (aref tan-dir-pos i) (* tbn (aref (positions dirlights) i))))
    (dotimes (i (size spotlights))
      (setf (aref tan-spot-pos i) (* tbn (aref (positions spotlights) i))))
    (dotimes (i (size pointlights))
      (setf (aref tan-point-pos i) (* tbn (aref (positions pointlights) i))))
    (values clip-pos (treat-uvs uv) norm (s~ world-pos :xyz)
            tbn
            dir-pos spot-pos
            tan-dir-pos tan-spot-pos tan-point-pos
            (* tbn cam-pos)
            (* tbn (s~ world-pos :xyz)))))
