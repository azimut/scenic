name: Linux Build

on: [push]

jobs:
  build:
    runs-on: ubuntu-18.04
    steps:

      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: APT deps
        run: |
          sudo apt-get update
          sudo apt-get install -y libassimp4 sbcl

      - name: mkdir
        run: |
          mkdir -pv ~/Downloads
          mkdir -pv ~/sbcl
          mkdir -pv ~/quicklisp
          mkdir -pv ~/.cache/common-lisp
        shell: bash

      - name: Get Current Month
        id: current-month
        run: echo "::set-output name=value::$(date -u '+%Y-%m')"
      - name: Cache SBCL Setup
        id: cache
        uses: actions/cache@v2
        env:
          cache-name: cache-sbcl-compressed-sdl
        with:
          path: |
            ~/Downloads/
            ~/quicklisp
            ~/.cache/common-lisp/
            ~/sbcl
          key: "${{ steps.current-month.outputs.value }}-${{ env.cache-name }}-${{ runner.os }}"
      - name: Restore Path To Cached Files
        run: |
          echo $HOME/sbcl/bin >> $GITHUB_PATH
        if: steps.cache.outputs.cache-hit == 'true'

      - name: Download SBCL 2.1.9
        run: |
          cd ~/Downloads
          wget http://downloads.sourceforge.net/project/sbcl/sbcl/2.1.9/sbcl-2.1.9-source.tar.bz2
          tar xjf sbcl-2.1.9-source.tar.bz2
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Install SBCL 2.1.9
        run: |
          cd ~/Downloads/sbcl-2.1.9
          sh make.sh --with-sb-core-compression
          unset SBCL_HOME
          INSTALL_ROOT=~/sbcl ./install.sh
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Build SDL 2.0.12
        run: |
          cd ~/Downloads
          wget https://www.libsdl.org/release/SDL2-2.0.12.tar.gz
          tar xzf SDL2-2.0.12.tar.gz
          cd SDL2-2.0.12
          ./configure
          make
        if: steps.cache.outputs.cache-hit != 'true'
      - name: Install SDL 2.0.12
        run: |
          cd ~/Downloads/SDL2-2.0.12
          sudo make install prefix=/usr

      - name: Install quicklisp
        run: |
          cd ~/Downloads
          export PATH="$HOME/sbcl/bin:${PATH}"
          wget https://beta.quicklisp.org/quicklisp.lisp
          sbcl --non-interactive \
               --eval '(load "quicklisp.lisp")' \
               --eval '(quicklisp-quickstart:install)' \
               --eval '(ql-util:without-prompting (ql:add-to-init-file))' \
               --eval '(ql:update-all-dists)' \
               --eval '(ql-dist:install-dist "http://bodge.borodust.org/dist/org.borodust.bodge.txt" :replace t :prompt nil)'
        if: steps.cache.outputs.cache-hit != 'true'

      - name: Get LISP deps
        run: |
          cd ~/quicklisp/local-projects/
          (test -d rocketman) || git clone --depth=1 https://github.com/azimut/rocketman
          ( cd rocketman/ ; git pull )
          (test -d cepl)      || git clone --depth=1 https://github.com/azimut/cepl
          ( cd cepl/      ; git pull )
          (test -d glsl-spec) || git clone --depth=1 https://github.com/azimut/glsl-spec
          ( cd glsl-spec/ ; git pull )
          (test -d cepl.fond) || git clone --depth=1 https://github.com/cbaggers/cepl.fond
          ( cd cepl.fond/ ; git pull )

      - name: Build Binary
        run: |
          export PATH="$HOME/sbcl/bin:${PATH}"
          cd bin/
          make scenic.AppImage

      - name: Dev Release
        uses: marvinpinto/action-automatic-releases@latest
        if: "!startsWith(github.ref, 'refs/tags/')"
        with:
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          automatic_release_tag: "latest-linux"
          prerelease: true
          title: "Development Build"
          files: |
            bin/scenic.AppImage
            LICENSE

      - name: Stable Release
        uses: marvinpinto/action-automatic-releases@latest
        if: "startsWith(github.ref, 'refs/tags/')"
        with:
          prerelease: false
          repo_token: "${{ secrets.GITHUB_TOKEN }}"
          files: |
            bin/scenic.AppImage
            LICENSE

      # - name: DEBUG SHELL
      #   uses: mxschmitt/action-tmate@v3
      #   if: ${{ failure() }}

